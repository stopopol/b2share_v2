<?php

/**
*@file
*b2share.module
* Allows a direct upload to B2Share using the REST API
*/

/**
 * Implements hook_menu().
 * Provides a configuration menu for the B2Share Module
 */

function b2share_menu() {
  $items = array();
  $items['admin/config/system/b2share'] = array(
    'title'  => 'B2Share Configuration',
    'description'  =>  'Settings for B2Share implementation module',
    'page callback'  => 'drupal_get_form',
    'page arguments'  => array('b2share_form'),
    'access arguments'  => array('access administration pages'),
   );

   $items['admin/config/system/b2share/settings'] = array(
     'title' => 'General Settings',
     'type' => MENU_DEFAULT_LOCAL_TASK,
     'weight' => -10
   );

   $items['admin/config/system/b2share/metadata'] = array(
     'title' => 'Metadata',
     'type' => MENU_LOCAL_TASK,
     'page callback'  => 'drupal_get_form',
     'page arguments'  => array('b2share_form_metadata'),
     'access arguments' => array('access administration pages')
   );

  return $items;
}

// Actual content of the menu
function b2share_form($form, &$form_state) {
  // display all fields of desired Content-type
  function retrieve_fields() {
    $output_array = array();
    $fields_info = field_info_instances('node', 'data_set');
    foreach ($fields_info as $field_name => $value) {
      $field_info = field_info_field($field_name);
      $type = $field_info['field_name'];
      $label = $field_info['label'];
      $output_array[] = $type;
    }
    return $output_array;
  }

  $form['b2share_url'] = array(
     '#type'  => 'textfield', //you can find a list of available types in the form api
     '#title'  => 'B2Share Base URL',
     '#description' => 'Please enter the URL the rest calls should address.',
     '#size'  => 70,
     '#maxlength'  => 70,
     '#required'  => TRUE,
     '#default_value'  => variable_get('b2share_url', 'https://trng-b2share.eudat.eu'),
   );

  $form['b2share_token'] = array(
     '#type'  => 'textfield', //you can find a list of available types in the form api
     '#title'  => 'B2Share Access Token',
     '#description' => 'Please enter the access token generated by B2Share.',
     '#size'  => 70,
     '#maxlength'  => 70,
     '#required'  => TRUE, //make this field required ,
     '#default_value'  => variable_get('b2share_token', 'Example LKR35GP7TG'),
   );

   $form['http_code_visible'] = array(
      '#type'  => 'checkbox', //you can find a list of available types in the form api
      '#title'  => 'Display HTTP status codes',
      '#description' => 'Should the status codes be displayed?',
      '#required'  => FALSE,
      '#default_value'  => variable_get('http_code_visible', 0),
    );

    $form['status_message_visible'] = array(
       '#type'  => 'checkbox', //you can find a list of available types in the form api
       '#title'  => 'Display curl status messages',
       '#description' => 'Should the curl status codes be displayed? ATTENTION: This can/will expose the token to users',
       '#required'  => FALSE,
       '#default_value'  => variable_get('status_message_visible', 0),
     );

     $form['ignore_outdate_certificates'] = array(
        '#type'  => 'checkbox', //you can find a list of available types in the form api
        '#title'  => 'Ignore outdated security certificates',
        '#description' => 'Should curl make its calls ignoring any security certificates? WARNING: SECURITY ISSUES',
        '#required'  => FALSE,
        '#default_value'  => variable_get('ignore_outdate_certificates', 0),
      );

  function _is_curl_installed() {
    if (in_array  ('curl', get_loaded_extensions())) {
        return true;
    }
    else {
        return false;
    }
  }

  function output_status_messages() {
    $http_code_visible = variable_get('http_code_visible');
    $status_message_visible = variable_get('status_message_visible');
    if ($http_code_visible==1) {
      drupal_set_message(t('The curl header sent is '.$headerSent));
      drupal_set_message(t('The status code is '.$http_status));
      drupal_set_message(t('The curl status message is '.$ausgabe));
    }
  }

  function ignore_certificates() {
    $ignore_outdate_certificates = variable_get('ignore_outdate_certificates');
    if ($ignore_outdate_certificates==TRUE) {
      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
      curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
    }
  }

  // Ouput text to user based on test
  if (_is_curl_installed()) {
    drupal_set_message(t('Curl is installed.'));
  } else {
    drupal_set_message(t('Curl is NOT installed.'), 'error');
  }

  return system_settings_form($form);
}


function b2share_form_metadata($form, &$form_state) {
  // display all fields of desired Content-type
  function retrieve_fields() {
    $output_array = array();
    $fields_info = field_info_instances('node', 'data_set');
    foreach ($fields_info as $field_name => $value) {
      $field_info = field_info_field($field_name);
      $type = $field_info['field_name'];
      $label = $field_info['label'];
      $output_array[] = $type;
    }
    return $output_array;
  }

  $form['b2share_domain'] = array(
    '#type'  => 'textfield',
    '#title'  => 'Domain',
    '#description' => 'Please enter the Domain the files should be stored under',
    '#size'  => 70,
    '#maxlength'  => 80,
    '#required'  => TRUE,
    '#default_value' => variable_get('b2share_domain', 'e9b9792e-79fb-4b07-b6b4-b9c2bd06d095'),
  );

  return system_settings_form($form);
}

// MENU END

/**
 * Implements hook_field_info().
 */

  function b2share_field_info() {
    return array(
      'b2share'  =>  array(
        'label'  =>  t('B2Share Field'),
        'description'  =>  t('Provides an interface to use the B2Share API'),
        'default_widget'  =>  'b2share_widget',
        'default_formatter'  =>  'b2share_formatter',
        'property_type' => 'text', // ???
        'property_callbacks' => array('b2share_field_property_callback'), // ???
      )
    );
  }

  /**
   * Implements hook_field_widget_info().
   */
 function b2share_field_widget_info() {
    return array(
      'b2share'  => array(
      'label'  => t('B2Share Widget'),
      'field types'  => array('b2share'),
      )
    );
  }

/**
 * Implements hook_field_settings_form().
 */
function b2share_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  // Add your global settings fields here
  $form = array();
  return $form;
}

 // Describes B2Share Formatter
 function b2share_field_formatter_info() {
    return array(
      'b2share_formatter'  => array(
      'label'  => t('Simple B2Share Field Formatter'),
      'field types'  => array('b2share'),
      ),
    );
  }

  /**
   * Implements hook_field_formatter_view().
   */
  function b2share_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element = array();
    switch ($display['type']) {
      case 'b2share_formatter' :
        foreach ($items as $delta => $item) {
          if (isset($item['doi'])) {
            $element[$delta]['#markup'] = '<a href="' . $item['doi'].'"target="_blank">'. $item['doi'] . '</a>' . '   PID: ' . $item['pid'];
          }
        }
        break;
    }
    return $element;
  }

/**
 * Implements hook_field_widget_form().
 */
function b2share_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  switch ($instance['widget']['type']) {

  case 'b2share':
    $form['b2share_fieldset'] = array(
      '#type'  => 'fieldset',
      '#title'  => t('Publish data on B2Share'),
      '#collapsible'  => FALSE,
      '#tree'  => TRUE,
    );

    $form['b2share_fieldset']['file_select'] = array(
      '#type' => 'managed_file',
      '#title' => t('Select File'),
      '#description' => t('Allowed extensions: gif png jpg jpeg txt csv'),
      '#default_value' => (isset($foo->picture->fid) ? $foo->picture->fid : ''),
      '#upload_location' => variable_get('picture_upload_location'),
      '#upload_validators' => array(
        'file_validate_extensions' => array('gif png jpg jpeg txt csv'),
        // Pass the maximum file size in bytes
        'file_validate_size' => array('MAX_FILE_SIZE'*1024*1024),
      ),
    );

    $form['b2share_fieldset']['title'] = array(
       '#title' => 'Title',
       '#description' => t('Enter the title the dataset should have on B2Share.'),
       '#type'  => 'textfield',
       // need to set some kind of default value
       '#default_value'  => '',
       '#prefix' => '<div id="b2share_creator_textfield_div">',
       '#suffix' => '</div>',
    );

    $form['b2share_fieldset']['description'] = array(
       '#title' => 'Description',
       '#description' => t('Put the description of the dataset here.'),
       '#type'  => 'textfield',
       // need to set some kind of default value
       '#default_value'  => '',
       '#prefix' => '<div id="b2share_description_textfield_div">',
       '#suffix' => '</div>',
    );

    $form['b2share_fieldset']['creator'] = array(
       '#title' => 'Creator',
       '#description' => t('Put the name of the creator here.'),
       '#type'  => 'textfield',
       // need to set some kind of default value
       '#default_value'  => '',
       '#prefix' => '<div id="b2share_creator_textfield_div">',
       '#suffix' => '</div>',
    );

    $form['b2share_fieldset']['open_access'] = array(
      '#type' =>'checkbox',
      '#title' => t('Open Access'),
      '#default_value'  => 1, // set default value to true
    );

    $form['b2share_fieldset']['submit_button'] = array(
      '#type'  => 'button',
      '#name'  => 'submit_button',
      '#default_value'  => t('Deposit file on B2Share'),
      '#ajax' => array(
        'event' => 'click',
        'callback' => 'b2share_ajax_submit',
        'wrapper' => 'b2share_pid_textfield_div',
      ),
      // is needed, otherwise the button will validate the entire form
      // http://drupal.stackexchange.com/questions/73382/how-to-omit-forms-validation-at-ajax-button-click
      '#limit_validation_errors' => array(),
    );

    $form['#attached']['js'] = array(
      drupal_get_path('module', 'b2share') . '/js/b2share.js',
    );

    $form['#attached']['css'] = array(
      drupal_get_path('module', 'b2share') . '/css/b2share.css',
    );

    $form['b2share_fieldset']['doi'] = array(
       '#title' => 'DOI',
       '#description' => t('Put the DOI here or have one generated.'),
       '#type'  => 'textfield',
       // need to set some kind of default value
       '#default_value'  => isset($items[$delta]['doi']) ? $items[$delta]['doi'] : '',
       '#prefix' => '<div id="b2share_doi_textfield_div">',
       '#suffix' => '</div>',
    );

    $form['b2share_fieldset']['pid'] = array(
       '#title' => 'PID',
       '#description' => t('Put the PID here or have one generated.'),
       '#type'  => 'textfield',
       // need to set some kind of default value
       '#default_value'  => isset($items[$delta]['pid']) ? $items[$delta]['pid'] : '',
       '#prefix' => '<div id="b2share_pid_textfield_div">',
       '#suffix' => '</div>',
    );

    break;
  }
  return $element;
}

/**
 * Functions that are being called - communication with the B2Share API happens here
 */

function b2share_ajax_submit(&$form, &$form_state) {

  // Fetch token from settings
  $temp_token = variable_get('b2share_token');
  
  if ($temp_token == 'Example LKR35GP7TG') {
    drupal_set_message(t('You need to set a token.'), 'error');
    return;
  }

  // check for curl
  $curl_version = function_exists('curl_version');

  if ($curl_version == false ) {
    drupal_set_message(t('Curl is NOT installed.'), 'error');
    return $form['b2share_fieldset']['pid'];
  }

  // Fetch metadata information and file

  // Load file from select form
  $file = file_load($form_state['values']['b2share_fieldset']['file_select']);

  if ((empty($file)) == true) {
    form_set_error('[b2share_fieldset][file_select]', t('Please select a file'));
    return $form['b2share_fieldset']['pid'];
  }

  // get file information
  $uri = $file->uri;
  $file_realpath =  drupal_realpath($uri);
  $file_url =       file_create_url($uri);
  $base_file_name = drupal_basename($uri);
  $open_access = $form_state['values']['b2share_fieldset']['open_access'];
  $md_description = $form_state['values']['b2share_fieldset']['description'];
  $md_title = $form_state['values']['b2share_fieldset']['title'];
  $md_creator = $form_state['values']['b2share_fieldset']['creator'];


  if ($open_access == 1){
    $open_access = true;
  }
  else {
    $open_access = false;
  }

  //drupal_set_message(t('The open access is '.$open_access));
  $status_message_visible = variable_get('status_message_visible');
  $http_code_visible = variable_get('http_code_visible');


  //timestamp
  $timestamp =  date("Y-m-d H:i:s");
  //$md_description = 'My first dataset ingested using the API and curl. Timestamp: '.$timestamp;

  $metadata_array = array(
   'domain' => variable_get('b2share_domain'),
   'title' => $md_title,
   'creator' => $md_creator,
   'description' => $md_description,
   'open_access' => $open_access,
  );

  // Build the query.
  // Create a new deposition
  $base_url = variable_get('b2share_url');
  $url = $base_url.'api/records/?access_token='.$temp_token;
  //drupal_set_message(t('The url is '.$url));
  //drupal_set_message(t('The open_access is '.$open_access));

  if(!$url || !is_string($url) || ! preg_match('/^http(s)?:\/\/[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(\/.*)?$/i', $url)){
    drupal_set_message(t('Bad url'));
  }

  $params = array(
    'title' => $md_title,
    'community' => variable_get('b2share_domain'),
    'open_access' => $open_access,
  );
  $params_json = json_encode($params);
  //drupal_set_message(t('The params_json is '.$params_json));

  // curl
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);

  $ignore_outdate_certificates = variable_get('ignore_outdate_certificates');
  if ($ignore_outdate_certificates==TRUE) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
  }

  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $params_json);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Accept:application/json',
    'Content-Type:application/json',
  ));
  curl_setopt($ch, CURLINFO_HEADER_OUT, true);

  // output the response
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

  $ausgabe = curl_exec($ch);
  $http_status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $headerSent = curl_getinfo($ch, CURLINFO_HEADER_OUT );

  if ($ausgabe === false) $ausgabe = curl_error($ch);

  curl_close($ch);

  // Return status message
  //drupal_set_message(t('The curl header sent is '.$headerSent));

  if ($http_code_visible==TRUE) {
    drupal_set_message(t('The publishing status for creating a draft is '.$http_status));
  }
  if ($status_message_visible==TRUE) {
    drupal_set_message(t('The curl status message for creating a draft is '.$ausgabe));
  }
  if ($http_status==401) {
	drupal_set_message(t('There is a problem with the authentication. Please check your token.'), 'error');
  }

  // Save response as php variable
  $php_variable = drupal_json_decode($ausgabe);
  $record_id = $php_variable['id'];
  $return_links = $php_variable['links'];
  $draft_id = $return_links['files'];
  $record_id = $return_links['self'];

  // PID of deposition
  $upload_url = $draft_id.'/'.$base_file_name.'?access_token='.$temp_token;
  //drupal_set_message(t('The upload_url is '.$upload_url));

  // deposit file
  $ch = curl_init($upload_url);
  $cfile = new CURLFile($file_realpath,'application/octet-stream', $base_file_name);
  $data = array ('test_file' => $cfile);
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Accept:application/json',
    'Content-Type:application/json',
  ));
  $ignore_outdate_certificates = variable_get('ignore_outdate_certificates');
  if ($ignore_outdate_certificates==TRUE) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
  }
  curl_setopt($ch, CURLINFO_HEADER_OUT, true);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $ausgabe = curl_exec($ch);

  $http_status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $headerSent = curl_getinfo($ch, CURLINFO_HEADER_OUT);

  curl_close($ch);

  // Return status message
  //drupal_set_message(t('The curl header sent is '.$headerSent));

  if ($http_code_visible==TRUE) {
    drupal_set_message(t('The status code for depositing the file is '.$http_status));
  }
  if ($status_message_visible==TRUE) {
    drupal_set_message(t('The curl status message for depositing the file is '.$ausgabe));
  }

  $patch_content='[{"op": "add", "path":"/publication_state", "value": "published"}]';

  $publish_url = $record_id.'?access_token='.$temp_token;
  //drupal_set_message(t('The publish_url is '.$publish_url));

  // Patch Call in order to publish a draft
  $ch = curl_init($publish_url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
  curl_setopt($ch, CURLOPT_POSTFIELDS, $patch_content);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Accept:application/json',
    'Content-Type:application/json-patch+json',
  ));

  $ignore_outdate_certificates = variable_get('ignore_outdate_certificates');
  if ($ignore_outdate_certificates==TRUE) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
  }

  curl_setopt($ch, CURLINFO_HEADER_OUT, true);
  $ausgabe = curl_exec($ch);

  $http_status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $headerSent = curl_getinfo($ch, CURLINFO_HEADER_OUT);

  if ($ausgabe === false) $ausgabe = curl_error($ch);

  curl_close($ch);

  // Return status message
  //drupal_set_message(t('The curl header sent is '.$headerSent));


  if ($http_code_visible==TRUE) {
    drupal_set_message(t('The publishing status code is '.$http_status));
  }
  if ($status_message_visible==TRUE) {
    drupal_set_message(t('The curl status message for publishing is '.$ausgabe));
  }

  if ($http_status == 200) {
    drupal_set_message(t('File was successfully deposited :)'), 'status');
  }
  else {
   drupal_set_message(t('Oh no. Something went wrong. No file was deposited :('), 'error');
   return $form['b2share_fieldset']['doi'];
  }

  $php_variable = drupal_json_decode($ausgabe);
  $files_content = $php_variable['metadata'];
  $pid = $files_content['ePIC_PID'];
  $doi = $files_content['DOI'];
  //drupal_set_message(t('The DOI is '.$doi));
  //drupal_set_message(t('The ePIC_PID is '.$pid));

  $form['b2share_fieldset']['doi']['#value'] = $doi;
  $form['b2share_fieldset']['pid']['#value'] = $pid;
  
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#b2share_doi_textfield_div", render($form['b2share_fieldset']['doi'])),
      ajax_command_replace("#b2share_pid_textfield_div", render($form['b2share_fieldset']['pid'])),
	  ajax_command_append("#b2share_pid_textfield_div", theme('status_messages')), 
    )
  ); 

  
}

/**
 * Implements hook_field_is_empty().
 */
function b2share_field_is_empty($item, $field) {
   // If there's nothing in $item['b2share'].
   if (empty($item['b2share_fieldset']['pid'])) {
      return TRUE;
    }
  return FALSE;

}

function b2share_form_node_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = 'b2share_save_to_db';
}


function b2share_save_to_db($form, &$form_state, $entity_id, $entity_type, $form_id) {
  
 
 $values = array(
   'doi' => $form_state['values']['b2share_fieldset']['doi'],
   'pid' => $form_state['values']['b2share_fieldset']['pid']
 );

  if ( (empty($values['doi'] == false) || (empty($values['pid']) == false)) ) {

	//$build_info_state = $form_state['build_info'];
	//$form_id_state = $build_info_state['values'];
	//drupal_set_message(t('form_id is '.$form_id_state));
	//drupal_set_message(t('entity_id is '.$entity_id));
	//$form_id_state = $form_state['values'];
	//foreach($form_id_state as $key => $value)
	//{
	//  echo $key." has the value". $value;
	//}
	//print_r($form);
  
    // how can i find out the name of the b2share field?
    $insert = db_insert('field_data_field_b2share3')
      -> fields(array(
        // and columns
       'field_b2share3_doi' => $values['doi'],
       'field_b2share3_pid' => $values['pid'],
       'entity_id' => $form_state['node']->nid,
       'entity_type' => 'node',
       'bundle' => $form_state['node']->type,
       'delta' => 0,
       'language' => 'und',
     ))
     ->execute();

  }
}


// needed for token integration

/**
 * Implements hook_token_info().
 */

 /*
function b2share_token_info() {

  // Define token value, body_trim is the token will be used as [node:body_trim]
  $b2share['deposit_url'] =  array(
    'name' => t("B2Share deposit url"),
    'description' => t("Provides deposit url"),
  );

  // Return associative array of tokens & token types
  return array(
    'tokens' => array(
      'node' => $b2share,
    ),
  );
} */

/**
 * Implements hook_tokens().

*function b2share_tokens($type, $tokens, array $data = array(), array $options = array()) {
*  $replacements = array();

*  // Check if token type is node
*  if($type == 'node'){
*    foreach ($tokens as $name => $original) {
*      switch ($name) {
*        case 'deposit_url':
*          //$url = $data['node']->['url'][0]['value'];
*          $url = "dummy_value";
*          $replacements[$original] = $url;
*          break;
*      }
*    }
*  }
*  return $replacements;
*}
*/

/**
 * Property callback.
 */
function b2share_field_property_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['property info']['doi'] = array(
    'type' => 'text',
    'label' => t('DOI of B2Share field'),
  );
}
